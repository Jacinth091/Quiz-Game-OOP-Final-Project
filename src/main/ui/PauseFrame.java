/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package main.ui;

import java.awt.Color;
import java.util.concurrent.CompletableFuture;
import javax.swing.ImageIcon;
import javax.swing.SwingUtilities;
import main.logic.AppContext;
import main.logic.GameEnums;
//import main.logic.GameEnums;
import static main.logic.GameEnums.GameMode.MULTIPLAYER;
import static main.logic.GameEnums.GameMode.SINGLE_PLAYER;

/**
 *
 * @author laroc
 */
public class PauseFrame extends javax.swing.JFrame {
    public static PauseFrame instance;
    private AppContext appContext;
    protected ImageIcon playBtn;
    protected ImageIcon pauseBtn;
    private CompletableFuture<Void> transition;
    /**
     * Creates new form pause
     * @param appContext
     */
    public PauseFrame(AppContext appContext) {
        this.appContext = appContext;
        this.playBtn = initializeIconImgs("play.png");
        this.pauseBtn = initializeIconImgs("pause.png");
        initComponents();
        PlayBtn.setIcon(playBtn);
        
//        setUndecorated(true);

    }
     
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        restartBtn = new javax.swing.JButton();
        homeBtn = new javax.swing.JButton();
        PlayBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(0, 102, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));

        jLabel1.setFont(new java.awt.Font("Segoe UI Black", 3, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("GAME PAUSED");

        restartBtn.setBackground(new java.awt.Color(255, 255, 255));
        restartBtn.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        restartBtn.setForeground(new java.awt.Color(0, 0, 51));
        restartBtn.setText("Restart");
        restartBtn.setBorderPainted(false);
        restartBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        restartBtn.setFocusable(false);
        restartBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                restartBtnMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                restartBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                restartBtnMouseExited(evt);
            }
        });
        restartBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restartBtnActionPerformed(evt);
            }
        });

        homeBtn.setBackground(new java.awt.Color(255, 255, 255));
        homeBtn.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        homeBtn.setForeground(new java.awt.Color(0, 0, 51));
        homeBtn.setText("Home");
        homeBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        homeBtn.setFocusable(false);
        homeBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                homeBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                homeBtnMouseExited(evt);
            }
        });
        homeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeBtnActionPerformed(evt);
            }
        });

        PlayBtn.setBackground(new java.awt.Color(0, 102, 204));
        PlayBtn.setActionCommand("Play");
        PlayBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        PlayBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlayBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 46, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(restartBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(PlayBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(homeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)))
                .addGap(43, 43, 43))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(homeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(restartBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PlayBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void restartBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restartBtnActionPerformed
        this.dispose(); // Close the current frame

       transition = CompletableFuture.runAsync(() -> {
           // Start the loading screen
           appContext.getLoadingScreen().start();

           // Wait until the loading is complete
           while (!appContext.getLoadingScreen().getIsLoadingComplete()) {
               try {
                   Thread.sleep(20); // Polling interval
               } catch (InterruptedException e) {
                   e.printStackTrace();
               }
           }
       });

       transition.thenRun(() -> {
           appContext.getGameLogic(appContext.getGameMode()).resetGameLogic();
       }).thenRun(() -> {
           // Ensure the loading screen completes and is disposed
           SwingUtilities.invokeLater(() -> {
               appContext.getLoadingScreen().setIsLoadingComplete(false);
               appContext.getLoadingScreen().dispose();

               // Restart the game
               appContext.getGame().restartGame();
           });
       });
        
    }//GEN-LAST:event_restartBtnActionPerformed

    private void restartBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_restartBtnMouseClicked
        //insert code for restart
        this.setVisible(false);        // TODO add your handling code here:
    }//GEN-LAST:event_restartBtnMouseClicked

    private void PlayBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlayBtnActionPerformed
        pauseBtnDelay(true);
    }//GEN-LAST:event_PlayBtnActionPerformed
    public void pauseBtnDelay(boolean value) {
        CompletableFuture.runAsync(() -> {
            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }).thenCompose(v -> CompletableFuture.runAsync(() -> {
            SwingUtilities.invokeLater(() -> {
                appContext.resetPauseFrame(); 
            });
            try {
                Thread.sleep(300); 
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        })).thenRun(() -> SwingUtilities.invokeLater(() -> {
            appContext.getGame().toggleBtns(value); 
            appContext.getGameLogic(appContext.getGameMode()).setGameState(GameEnums.GameState.Play);
            appContext.getGameLogic(appContext.getGameMode()).getGameTimerClass().startTimer();

            // Reset pause button state
            appContext.getGame().getPauseBtn().setSelected(false);
            appContext.getGame().getPauseBtn().setIcon(pauseBtn);
        }));
    }

    private void homeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeBtnActionPerformed
        this.dispose(); // Close the current frame

        transition = CompletableFuture.runAsync(() -> {
            // Start the loading screen
            appContext.getLoadingScreen().start();

            // Wait until the loading is complete
            while (!appContext.getLoadingScreen().getIsLoadingComplete()) {
                try {
                    Thread.sleep(20); // Polling interval
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });

        transition.thenCompose(v -> CompletableFuture.runAsync(() -> {
            // Reset game logic based on the game mode
            if (MULTIPLAYER.equals(appContext.getGameMode())) {
                appContext.resetMultiPlayer();
            } else if (SINGLE_PLAYER.equals(appContext.getGameMode())) {
                appContext.resetSinglePlayer();
            }

            appContext.getGameLogic(appContext.getGameMode()).resetGameLogic();
        })).thenRun(() -> {
            // Show the home screen after reset
            new HomeForm(appContext).setVisible(true);
            appContext.getLoadingScreen().dispose();
        });

    }//GEN-LAST:event_homeBtnActionPerformed

    private void restartBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_restartBtnMouseEntered
        restartBtn.setBackground(Color.decode("#999999"));        // TODO add your handling code here:
        // TODO add your handling code here:
    }//GEN-LAST:event_restartBtnMouseEntered

    private void restartBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_restartBtnMouseExited
         restartBtn.setBackground(Color.decode("#FFFFFF"));        // TODO add your handling code here:
        // TODO add your handling code here:
    }//GEN-LAST:event_restartBtnMouseExited

    private void homeBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_homeBtnMouseEntered
        homeBtn.setBackground(Color.decode("#999999"));        // TODO add your handling code here:
        // TODO add your handling code here:
    }//GEN-LAST:event_homeBtnMouseEntered

    private void homeBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_homeBtnMouseExited
        homeBtn.setBackground(Color.decode("#FFFFFF"));        // TODO add your handling code here:
        // TODO add your handling code here:
    }//GEN-LAST:event_homeBtnMouseExited
     
    
    
    private ImageIcon initializeIconImgs(String imagePath) {
       // Find the image by name using your helper method
       ImageIcon temp = appContext.getImageHelper().findImageByName(imagePath);

       ImageIcon myImage = null;
       if (temp != null) {
           // Resize the image and assign it to myImage
           myImage = appContext.getImageHelper().resizeImageIcon(temp, 20, 20);
           return myImage;  // Return the resized image
       } else {
           // Handle the case when the image is not found
           System.out.println("Image not found!");
           myImage = null;
       }
       return myImage;  // Return null if image not found
   }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public static synchronized PauseFrame getInstance(AppContext appContext){
        if(instance == null){
            instance = new PauseFrame(appContext);
        }
        return instance;
    } 
    public static void resetInstance() {
        if (instance != null) {
            instance.dispose(); // Clean up the current instance
            instance = null;
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PauseFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PauseFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PauseFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PauseFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
//                new PauseFrame().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton PlayBtn;
    private javax.swing.JButton homeBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton restartBtn;
    // End of variables declaration//GEN-END:variables
}
