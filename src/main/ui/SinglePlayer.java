/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package main.ui;

import backend.Database.DatabaseManager;
import backend.Questions.Question;
import main.logic.AppContext;
import java.awt.Color;
import javax.swing.Timer;
import main.PlayerData.Player;
import main.PlayerData.Session;
import main.logic.GameEnums;
import main.logic.GameLogic;
import main.logic.GameTimer;
import main.logic.Updatable;
import main.update.TimeUpdatable;

/**
 *
 * @author laroc
 * @author Jacinth
 */
public class SinglePlayer extends javax.swing.JFrame implements TimeUpdatable{
    private GameEnums.GameMode gameMode = GameEnums.GameMode.SINGLE_PLAYER;

    private AppContext appContext;
    private DatabaseManager dbManager;
    private Session session;
    private GameLogic gameLogic;

    private Timer gameTimer;
    private Question current;
    private Question next;
    
    private boolean isProcessingFlag;
    private Timer reEnableTimer;
    /**
     * Creates new form singlePlayer
     * @param appContext
     */
    public SinglePlayer(AppContext appContext) {
        this.appContext = appContext;
        this.dbManager = appContext.getDbManager();
        this.session = appContext.getSession();
        this.gameLogic = appContext.getGameLogic(gameMode);
//        gameTimer = gameLogic.getGameTimer();

        current = gameLogic.getCurrent();
//        displayQuestion();


        initComponents();
        setLocationRelativeTo(null);
        setResizable(false);
        setVisible(true);
        
        gameLogic.getGameTimerClass().addEventUpdate(() -> timeUpdate());
        
        
        gameLogic.startTimer();


    }

    public SinglePlayer() {
        this.appContext = AppContext.getInstance();
        this.dbManager = appContext.getDbManager();
        this.session = appContext.getSession();
        session.setPlayer(new Player("1", "Gwapo", 0, 0));
//        singleLogic = new GameTimer(appContext,gameMode, this);

        initComponents();

        setLocationRelativeTo(null);
        setResizable(false);
        setVisible(true);
//        singleLogic.startTimer();


    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        mainQuestionLabel = new javax.swing.JLabel();
        choiceQ = new javax.swing.JButton();
        choiceE = new javax.swing.JButton();
        choiceR = new javax.swing.JButton();
        QLabel = new javax.swing.JLabel();
        ALabel = new javax.swing.JLabel();
        Wlabel = new javax.swing.JLabel();
        choiceW = new javax.swing.JButton();
        SLabel = new javax.swing.JLabel();
        goBack = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jSeparator2 = new javax.swing.JSeparator();
        ply1Name = new javax.swing.JLabel();
        SocreLabel = new javax.swing.JLabel();
        SocreLabel1 = new javax.swing.JLabel();
        plyScore = new javax.swing.JLabel();
        timerLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mainPanel.setBackground(new java.awt.Color(0, 0, 51));

        jPanel2.setBackground(new java.awt.Color(102, 153, 255));

        mainQuestionLabel.setFont(new java.awt.Font("Montserrat", 0, 18)); // NOI18N
        mainQuestionLabel.setForeground(new java.awt.Color(255, 255, 255));
        mainQuestionLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        mainQuestionLabel.setText(current.getQuestionText());
        mainQuestionLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addComponent(mainQuestionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 434, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(64, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(28, Short.MAX_VALUE)
                .addComponent(mainQuestionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
        );

        choiceQ.setBackground(new java.awt.Color(0, 102, 204));
        choiceQ.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        choiceQ.setForeground(new java.awt.Color(255, 255, 255));
        choiceQ.setText(current.getOptions().get(0));
        choiceQ.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        choiceQ.setFocusable(false);
        choiceQ.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        choiceQ.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                choiceQMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                choiceQMouseExited(evt);
            }
        });
        choiceQ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optQEvent(evt);
            }
        });

        choiceE.setBackground(new java.awt.Color(0, 102, 204));
        choiceE.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        choiceE.setForeground(new java.awt.Color(255, 255, 255));
        choiceE.setText(current.getOptions().get(2));
        choiceE.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        choiceE.setFocusable(false);
        choiceE.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        choiceE.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                choiceEMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                choiceEMouseExited(evt);
            }
        });
        choiceE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optEEvent(evt);
            }
        });

        choiceR.setBackground(new java.awt.Color(0, 102, 204));
        choiceR.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        choiceR.setForeground(new java.awt.Color(255, 255, 255));
        choiceR.setText(current.getOptions().get(3));
        choiceR.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        choiceR.setFocusable(false);
        choiceR.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        choiceR.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                choiceRMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                choiceRMouseExited(evt);
            }
        });
        choiceR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optREvent(evt);
            }
        });

        QLabel.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        QLabel.setForeground(new java.awt.Color(0, 204, 255));
        QLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        QLabel.setText("Q");

        ALabel.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        ALabel.setForeground(new java.awt.Color(0, 204, 255));
        ALabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ALabel.setText("E");

        Wlabel.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        Wlabel.setForeground(new java.awt.Color(0, 204, 255));
        Wlabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Wlabel.setText("W");

        choiceW.setBackground(new java.awt.Color(0, 102, 204));
        choiceW.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        choiceW.setForeground(new java.awt.Color(255, 255, 255));
        choiceW.setText(current.getOptions().get(1));
        choiceW.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        choiceW.setFocusable(false);
        choiceW.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        choiceW.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                choiceWMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                choiceWMouseExited(evt);
            }
        });
        choiceW.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optWEvent(evt);
            }
        });

        SLabel.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        SLabel.setForeground(new java.awt.Color(0, 204, 255));
        SLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        SLabel.setText("R");

        goBack.setBackground(new java.awt.Color(0, 102, 204));
        goBack.setFont(new java.awt.Font("Segoe UI Black", 1, 12)); // NOI18N
        goBack.setForeground(new java.awt.Color(255, 255, 255));
        goBack.setText("Go back");
        goBack.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        goBack.setFocusable(false);
        goBack.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                goBackMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                goBackMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                goBackMouseExited(evt);
            }
        });

        jPanel3.setBackground(null);

        jSeparator2.setForeground(new java.awt.Color(255, 255, 255));
        jSeparator2.setPreferredSize(new java.awt.Dimension(0, 5));

        ply1Name.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        ply1Name.setForeground(new java.awt.Color(255, 255, 255));
        ply1Name.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        ply1Name.setText(session.getPlayer().getPlayerName()
        );

        SocreLabel.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        SocreLabel.setForeground(new java.awt.Color(255, 255, 255));
        SocreLabel.setText("Score:");

        SocreLabel1.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        SocreLabel1.setForeground(new java.awt.Color(255, 255, 255));
        SocreLabel1.setText("Name:");

        plyScore.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        plyScore.setForeground(new java.awt.Color(255, 255, 255));
        plyScore.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        plyScore.setText("0");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(SocreLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ply1Name, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(SocreLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(plyScore, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(9, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SocreLabel1)
                    .addComponent(ply1Name, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SocreLabel)
                    .addComponent(plyScore, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(20, 20, 20))
        );

        timerLabel.setFont(new java.awt.Font("Montserrat", 1, 24)); // NOI18N
        timerLabel.setForeground(new java.awt.Color(255, 255, 255));
        timerLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        timerLabel.setText("00:00");

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(108, 108, 108)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(choiceQ, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(QLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(choiceE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ALabel, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(90, 90, 90)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(choiceR, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(choiceW, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Wlabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(SLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(238, 238, 238)
                                .addComponent(goBack))))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(242, 242, 242)
                        .addComponent(timerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(goBack)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addComponent(timerLabel)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(choiceW, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Wlabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(choiceR, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SLabel))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addGap(239, 239, 239)
                        .addComponent(choiceQ, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(QLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(choiceE, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ALabel)))
                .addContainerGap(105, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void goBackMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_goBackMouseExited
        goBack.setBackground(Color.decode("#0066CC")); // TODO add your handling code here:
        // TODO add your handling code here:
    }//GEN-LAST:event_goBackMouseExited

    private void goBackMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_goBackMouseEntered
        goBack.setBackground(Color.decode("#6699FF"));          // TODO add your handling code here:
        // TODO add your handling code here:
    }//GEN-LAST:event_goBackMouseEntered

    private void goBackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_goBackMouseClicked
        new HomeForm(appContext).setVisible(true);

        this.setVisible(false);        // TODO add your handling code here:
        gameLogic.stopTimer();
    }//GEN-LAST:event_goBackMouseClicked

    private void choiceWMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_choiceWMouseExited
        choiceW.setBackground(Color.decode("#0066CC")); // TODO add your handling code here:
        // TODO add your handling code here:
    }//GEN-LAST:event_choiceWMouseExited

    private void choiceWMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_choiceWMouseEntered
        choiceW.setBackground(Color.decode("#6699FF"));          // TODO add your handling code here:
        // TODO add your handling code here:
    }//GEN-LAST:event_choiceWMouseEntered

    private void choiceRMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_choiceRMouseExited
        choiceR.setBackground(Color.decode("#0066CC")); // TODO add your handling code here:
        // TODO add your handling code here:
    }//GEN-LAST:event_choiceRMouseExited

    private void choiceRMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_choiceRMouseEntered
        choiceR.setBackground(Color.decode("#6699FF"));          // TODO add your handling code here:
        // TODO add your handling code here:
    }//GEN-LAST:event_choiceRMouseEntered

    private void choiceEMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_choiceEMouseExited
        choiceE.setBackground(Color.decode("#0066CC")); // TODO add your handling code here:
        // TODO add your handling code here:
    }//GEN-LAST:event_choiceEMouseExited

    private void choiceEMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_choiceEMouseEntered
        choiceE.setBackground(Color.decode("#6699FF"));          // TODO add your handling code here:
        // TODO add your handling code here:
    }//GEN-LAST:event_choiceEMouseEntered

    private void choiceQMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_choiceQMouseExited
        choiceQ.setBackground(Color.decode("#0066CC")); // TODO add your handling code here:
        // TODO add your handling code here:
    }//GEN-LAST:event_choiceQMouseExited

    private void choiceQMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_choiceQMouseEntered
        choiceQ.setBackground(Color.decode("#6699FF"));          // TODO add your handling code here:
        // TODO add your handling code here:
    }//GEN-LAST:event_choiceQMouseEntered

    private void optQEvent(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optQEvent
        // TODO add your handling code here:
        processPlayerAnswer();
    }//GEN-LAST:event_optQEvent

    private void optWEvent(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optWEvent
        // TODO add your handling code here:
        processPlayerAnswer();
    }//GEN-LAST:event_optWEvent

    private void optEEvent(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optEEvent
        // TODO add your handling code here:
        processPlayerAnswer();
        
    }//GEN-LAST:event_optEEvent

    private void optREvent(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optREvent
        // TODO add your handling code here:
        processPlayerAnswer();
    }//GEN-LAST:event_optREvent
    
    
    
    public void processPlayerAnswer(){
        if(isProcessingFlag) return;

        if(reEnableTimer != null && reEnableTimer.isRunning()){
            reEnableTimer.stop();
        }
        
        isProcessingFlag = true;
        choiceQ.setEnabled(false);
        choiceW.setEnabled(false);
        choiceE.setEnabled(false);
        choiceR.setEnabled(false);
        
        
        System.out.println("Processing!...");
//        checkAnswers();

        
        reEnableTimer = new Timer(500, (ae) ->{
            choiceQ.setEnabled(true);
            choiceW.setEnabled(true);
            choiceE.setEnabled(true);
            choiceR.setEnabled(true);
            isProcessingFlag= false;

        });
        reEnableTimer.setDelay(1000);
        reEnableTimer.start();
            // Delay the next question display by 1 second
        Timer nextQuestionTimer = new Timer(500, (ae) -> {
            displayNextQuestion();
        });
        nextQuestionTimer.setRepeats(false); // Only execute once
        nextQuestionTimer.start();
    }
    
    public void displayNextQuestion(){
        next = gameLogic.getQuestionFromMap();
        char[] label = {'Q', 'W', 'E', 'R'};
        System.out.println("Current Question:\n"+ next.getQuestionText());
        for (int i =0; i < next.getOptions().size(); i++) {
            System.out.println(label[i] + ") " + next.getOptions().get(i));
        }
        for (String line : next.getQuestionText().split("\n")) {
           // Add <br> for each line to create a new line in HTML format
           mainQuestionLabel.setText("<html><div style='text-align: center;'>" + String.join("<br>", next.getQuestionText().split("\n")) + "</div></html>");
        }

            choiceQ.setText(next.getOptions().get(0));
            choiceW.setText(next.getOptions().get(1));
            choiceE.setText(next.getOptions().get(2));
            choiceR.setText(next.getOptions().get(3));
    
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SinglePlayer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SinglePlayer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SinglePlayer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SinglePlayer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SinglePlayer().setVisible(true);
            }
        });
    }

    
    public void updateTimeLabel(long timerMinutes, long timerSeconds){
        timerLabel.setText(String.format("%02d:%02d", timerMinutes, timerSeconds));
    }

    @Override
    public void timeUpdate(){
        updateTimeLabel(gameLogic.getGameTimerClass().getTimerMinutes(), gameLogic.getGameTimerClass().getTimerSeconds());
    }
    
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ALabel;
    private javax.swing.JLabel QLabel;
    private javax.swing.JLabel SLabel;
    private javax.swing.JLabel SocreLabel;
    private javax.swing.JLabel SocreLabel1;
    private javax.swing.JLabel Wlabel;
    private javax.swing.JButton choiceE;
    private javax.swing.JButton choiceQ;
    private javax.swing.JButton choiceR;
    private javax.swing.JButton choiceW;
    private javax.swing.JButton goBack;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JLabel mainQuestionLabel;
    private javax.swing.JLabel ply1Name;
    private javax.swing.JLabel plyScore;
    private javax.swing.JLabel timerLabel;
    // End of variables declaration//GEN-END:variables
}

